#!/usr/bin/env bash
#
# fzf-fs
# Copyright (C) 2015f. D630, The MIT License (MIT)
# <https://github.com/D630/fzf-fs>

###############################################################################
# -- DEBUGGING.
###############################################################################
#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o errexit
#set -o errtrace
#set -o noexec
#set -o nounset
#set -o pipefail
#set -o verbose
#set -o xtrace
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG
#exec 2>> /tmp/fzf-fs.log
#typeset vars_base=$(set -o posix ; set)
#fgrep -v -e "$vars_base" < <(set -o posix ; set) | \
#egrep -v -e "^BASH_REMATCH=" \
#         -e "^OPTIND=" \
#         -e "^REPLY=" \
#         -e "^BASH_LINENO=" \
#         -e "^BASH_SOURCE=" \
#         -e "^FUNCNAME=" | \
#less

###############################################################################
# -- CONTROL.
###############################################################################

if
        [[ ${BASH_SOURCE[0]} == $0 && -n ${BASH_VERSION[0]} ]]
then
        builtin typeset -x +i FZF_FS_CONF_DIR="${FZF_FS_CONF_DIR:-${XDG_CONFIG_HOME:-${HOME}/.config}/fzf-fs.d}"
else
        builtin printf '%s\n' "fzf-fs: Error: Do not execute fzf-fs via source" 1>&2
        builtin return 1 2>/dev/null
fi

###############################################################################
# -- COMMANDS.
###############################################################################

builtin typeset -a FZF_FS_COMMANDS="(
        BindKey
        Chdir
        Child
        EBindKey
        Edit
        Editor
        ExpectKey
        GetKey
        LegendKey
        MapKey
        Open
        Opener
        Page
        Pager
        Parent
        #PrintConfig
        Quit
        Set
        Sh
        Shell
        Toggle
)"

Fzf::Fs::C::Chdir ()
{
        builtin typeset \
                prompt=Chdir \
                tmp;

        Fzf::Fs::U::Parse::Args "$@" || builtin return 1

        builtin cd -- "$tmp"

        #Fzf::Fs::U::Test::Interactive || {
        #        Fzf::Fs::U::Spool "builtin cd -- '%s'\n" "${PWD//\'/\'\\\'\'}"
        #}
}

Fzf::Fs::C::Child ()
{
        builtin typeset \
                prompt=Child \
                tmp;

        Fzf::Fs::U::Parse::Args "$@" || builtin return 1

        if
                [[ -d $tmp ]]
        then
                Fzf::Fs::C::Chdir "$tmp"
        else
                Fzf::Fs::C::Open "$tmp"
        fi
}

Fzf::Fs::C::Edit ()
{
        builtin typeset \
                prompt=Editor \
                tmp;

        Fzf::Fs::U::Parse::Args "$@" || builtin return 1

        Fzf::Fs::U::Set::Cursor 1
        Fzf::Fs::C::Editor "$tmp"
        Fzf::Fs::U::Set::Cursor 0
}

Fzf::Fs::C::Editor ()
{
        </dev/tty command ${EDITOR:-vi} -- "$@" >/dev/tty
}

Fzf::Fs::C::BindKey ()
{
        if
                [[ $1 == -i ]] || Fzf::Fs::U::Test::Interactive
        then
                builtin typeset \
                        bind \
                        key \
                        mode;
                builtin read -r mode bind < <(
                        command fzf \
                                --print-query \
                                --prompt="BindKey " \
                                --query=". .:." \
                        0<&-;
                )
                if
                        [[ -z $mode || -z $bind ]]
                then
                        builtin return 1
                else
                        case $mode in
                        ?*k)
                                key=${bind%%:*}
                                FzfFsBinds[${mode}.${key=:}.bind]+="${bind#${key}:},"
                        ;;
                        *)
                                FzfFsBinds[${mode}.bind]+="${bind},"
                        esac
                fi
        else
                if
                        [[ -z $2 || -z $3 ]]
                then
                        builtin return 1
                else
                        case $1 in
                        ?*k)
                                FzfFsBinds[${1}.${2}.bind]+="${3},"
                        ;;
                        *)
                                FzfFsBinds[${1}.bind]+="${2}:${3},"
                        esac
                fi
        fi
}


Fzf::Fs::C::EBindKey ()
{
        if
                [[ $1 == -i ]] || Fzf::Fs::U::Test::Interactive
        then
                builtin typeset \
                        bind \
                        mode;
                builtin read -r mode bind < <(
                        command fzf \
                                --print-query \
                                --prompt="EBindKey " \
                                --query=". .:execute(.)" \
                        0<&-;
                )
                if
                        [[ -z $mode || -z $bind ]]
                then
                        builtin return 1
                else
                        FzfFsBinds[${mode}.bind]+="${bind},"
                fi
        else
                if
                        [[ -z $2 || -z $3 ]]
                then
                        builtin return 1
                else
                        FzfFsBinds[${1}.bind]+="${2}:execute(${3}),"
                fi
        fi
}

Fzf::Fs::C::ExpectKey ()
{
        if
                [[ $1 == -i ]] || Fzf::Fs::U::Test::Interactive
        then
                builtin typeset \
                        mode \
                        key;
                builtin read -r mode key < <(
                        command fzf \
                                --print-query \
                                --prompt="ExpectKey " \
                                --query=". ." \
                        0<&-;
                )
                if
                        [[ -z $key || -z $mode ]]
                then
                        builtin return 1
                else
                        FzfFsBinds[${mode}.expect]+="${key},"
                fi
        else
                if
                        [[ -z $2 ]]
                then
                        builtin return 1
                else
                        FzfFsBinds[${1}.expect]+="${2},"
                fi
        fi
}

Fzf::Fs::C::LegendKey ()
{
        if
                [[ $1 == -i ]] || Fzf::Fs::U::Test::Interactive
        then
                builtin typeset \
                        mode \
                        legend;
                builtin read -r mode key < <(
                        command fzf \
                                --print-query \
                                --prompt="LegendKey " \
                                --query=". ." \
                        0<&-;
                )
                if
                        [[ -z $legend || -z $mode ]]
                then
                        builtin return 1
                else
                        FzfFsBinds[${mode}.legend]=$"${legend}"
                fi
        else
                if
                        [[ -z $2 ]]
                then
                        builtin return 1
                else
                        FzfFsBinds[${1}.legend]=$"${2}"
                fi
        fi
}

Fzf::Fs::C::GetKey ()
{
        (( $# )) || builtin return 1

        builtin typeset \
                key="$1" \
                sel="${@:2}";

        Fzf::Fs::U::Set::Cursor 0

        case ${FzfFsVarsStr[mode]} in
        console)
                Fzf::Fs::O::Consolek "$key"
                Fzf::Fs::Runk Consolek "$key" "$sel"
        ;;
        search)
                Fzf::Fs::O::Searchk "$key"
                Fzf::Fs::Runk Searchk "$key" "$sel"
        ;;
        *)
                Fzf::Fs::O::Normalk "$key"
                Fzf::Fs::Runk Normalk "$key" "$sel"
        esac
}

Fzf::Fs::C::MapKey ()
{
        if
                [[ $1 == -i ]] || Fzf::Fs::U::Test::Interactive
        then
                builtin typeset \
                        key \
                        map \
                        mode;
                builtin read -r mode map < <(
                        command fzf \
                                --print-query \
                                --prompt="MapKey " \
                                --query=". .:." \
                        0<&-;
                )
                if
                        [[ -z $mode || -z $map ]]
                then
                        builtin return 1
                else
                        key=${map%%:*}
                        FzfFsBinds[${mode}.${key=:}]="${map#${key}:}"
                fi
        else
                if
                        [[ -z $2 || -z $3 ]]
                then
                        builtin return 1
                else
                        FzfFsBinds[${1}.${2}]="${3}"
                fi
        fi
}

Fzf::Fs::C::Open ()
{
        builtin typeset \
                prompt=Opener \
                tmp;

        Fzf::Fs::U::Parse::Args "$@"

        Fzf::Fs::U::Set::Cursor 1
        Fzf::Fs::C::Opener "$tmp"
        Fzf::Fs::U::Set::Cursor 0
}

Fzf::Fs::C::Opener ()
{
        </dev/tty command ${OPENER:-${PAGER:-less -R}} -- "$@" >/dev/tty
}

Fzf::Fs::C::Page ()
{
        builtin typeset \
                prompt=Pager \
                tmp;

        Fzf::Fs::U::Parse::Args "$@" || builtin return 1

        Fzf::Fs::U::Set::Cursor 1
        Fzf::Fs::C::Pager "$tmp"
        Fzf::Fs::U::Set::Cursor 0
}

Fzf::Fs::C::Pager ()
{
        </dev/tty command ${PAGER:-less -R} -- "$@" >/dev/tty
}

Fzf::Fs::C::Parent ()
{
        (( $# )) || {
                builtin typeset \
                        prompt=Parent \
                        tmp;

                Fzf::Fs::U::Set::Cursor 1

                command tput -S <<CAP
sc
cup $(( ${LINES:-$(command tput lines)} - 2 )) 0
ed
CAP
                builtin read -re -p ":${prompt} " tmp

                command tput -S <<CAP
rc
ed
CAP

                builtin set -- ${tmp}
        } </dev/tty >/dev/tty

        [[ -z ${1//[0-9]/} ]] && {
                builtin printf -v tmp '%*s' "${1:-1}" ""
                builtin cd -- "${tmp// /..\/}"
                #Fzf::Fs::U::Test::Interactive || {
                #        Fzf::Fs::U::Spool "builtin cd -- '%s'\n" "${PWD//\'/\'\\\'\'}"
                #}
        }
}

#Fzf::Fs::C::PrintConfig ()
#{
#        case $1 in
#        +i)
#                _console_interactive=0
#                builtin shift 1
#        ;;
#        -i)
#                _console_interactive=1
#                builtin shift 1
#        esac
#
#        if
#                Fzf::Fs::U::Test::Interactive
#        then
#                Fzf::Fs::U::Set::Cursor 0
#                command sed '
#                        /^FZF_FS_/ !{d;b return};
#                        s/=/{}/;
#                        : return;
#                ' <(builtin set) \
#                | exec sort \
#                | exec column -t -s '{}' \
#                | exec fzf --header=PrintConfig --prompt="ENV " 1>/dev/null;
#                Fzf::Fs::U::Set::Cursor 1
#        else
#                command grep '^FZF_FS_' <(builtin set)
#        fi
#}

Fzf::Fs::C::Quit ()
{
        builtin exit 0
        #Fzf::Fs::U::Test::Interactive && Fzf::Fs::C::Set normal.mode
        #Fzf::Fs::U::Spool "%s\n" "builtin break"
}

Fzf::Fs::C::Set ()
{
        [[ $1 == -i ]] && FzfFsVarsInt[interactive]=1 && builtin shift 1

        if
                Fzf::Fs::U::Test::Interactive && [[ -z $1 ]]
        then
                builtin typeset \
                        bold="$(command tput bold || command tput md)" \
                        green="$(command tput setaf 2 || command tput AF 2)" \
                        red="$(command tput setaf 1 || command tput AF 1)" \
                        reset=$(command tput sgr0 || command tput me) \
                        s;
                while
                        builtin read -r s _
                do
                        Fzf::Fs::C::Set "$s"
                done < <(
                        Fzf::Fs::U::Set::Cursor 1
                        Fzf::Fs::O::Set
                        {
                                command sed "
                                        / / !b return;
                                        / null$/ {
                                                s/null$/${bold}${red}&${reset}/;
                                                b return;
                                        };
                                        s/ \(.*\)/ ${bold}${green}\1${reset}/;
                                        : return;
                                " <<SET
$(
        for i in "${!FzfFsSettingsStr[@]}"
        do
                builtin printf '%s\n' "$i"
        done
)
console.history ${FzfFsOptsStr[console.history]:-null}
console.history.size ${FzfFsOptsStr[console.history.size]:-null}
console.margin ${FzfFsOptsStr[console.margin]:-null}
console.tabstop ${FzfFsOptsStr[console.tabstop]:-null}
console.theme ${FzfFsOptsStr[console.theme]:-null}
consolek.margin ${FzfFsOptsStr[consolek.margin]:-null}
consolek.tabstop ${FzfFsOptsStr[consolek.tabstop]:-null}
consolek.theme ${FzfFsOptsStr[consolek.theme]:-null}
lc.collate ${LC_COLLATE:-null}
ls.lformat ${FzfFsOptsStr[ls.lformat]:-null}
ls.r ${FzfFsOptsInt[ls.r]:-null}
ls.time ${FzfFsOptsStr[ls.time]:-null}
ls.sort ${FzfFsOptsStr[ls.sort]:-null}
mode ${FzfFsVarsStr[mode]:-null}
normal.margin ${FzfFsOptsStr[normal.margin]:-null}
normal.tabstop ${FzfFsOptsStr[normal.tabstop]:-null}
normal.theme ${FzfFsOptsStr[normal.theme]:-null}
normalk.margin ${FzfFsOptsStr[normalk.margin]:-null}
normalk.tabstop ${FzfFsOptsStr[normalk.tabstop]:-null}
normalk.theme ${FzfFsOptsStr[normalk.theme]:-null}
os ${FzfFsOptsStr[os]:-null}
search.case ${FzfFsOptsStr[search.case]:-null}
search.criteria ${FzfFsOptsStr[search.criteria]:-null}
search.history ${FzfFsOptsStr[search.history]:-null}
search.history.size ${FzfFsOptsStr[search.history.size]:-null}
search.margin ${FzfFsOptsStr[search.margin]:-null}
search.tabstop ${FzfFsOptsStr[search.tabstop]:-null}
search.theme ${FzfFsOptsStr[search.theme]:-null}
searchk.margin ${FzfFsOptsStr[searchk.margin]:-null}
searchk.tabstop ${FzfFsOptsStr[searchk.tabstop]:-null}
searchk.theme ${FzfFsOptsStr[searchk.theme]:-null}
set.case ${FzfFsOptsStr[set.case]:-null}
set.criteria ${FzfFsOptsStr[set.criteria]:-null}
set.margin ${FzfFsOptsStr[set.margin]:-null}
set.tabstop ${FzfFsOptsStr[set.tabstop]:-null}
set.theme ${FzfFsOptsStr[set.theme]:-null}
tog.case ${FzfFsOptsStr[tog.case]:-null}
tog.criteria ${FzfFsOptsStr[tog.criteria]:-null}
tog.margin ${FzfFsOptsStr[tog.margin]:-null}
tog.tabstop ${FzfFsOptsStr[tog.tabstop]:-null}
tog.theme ${FzfFsOptsStr[tog.theme]:-null}
SET
                        } \
                        | exec sort \
                        | exec column -t \
                        | Fzf::Fs::F::Set;

                )
                builtin return 0
        fi

        if
                [[ -n ${FzfFsOptsInt[$1]} ]]
        then
                FzfFsOptsInt[$1]=${2:-1}
                builtin return 0
        elif
                [[ -n ${FzfFsSettingsStr[$1]} ]]
        then
                builtin eval "${FzfFsSettingsStr[$1]}"
                builtin return 0
        fi

        case $1 in
        console.theme)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[console.theme]=$(
                                command fzf \
                                        --prompt="console.theme=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[console.theme]=$2
                fi
                FzfFsOptsStr[console.theme]=${FzfFsOptsStr[console.theme]:-bw}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[console.theme]='%s'\n" \
                        "${FzfFsOptsStr[console.theme]}";
        ;;
        console.history)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[console.history]=$(
                                command fzf \
                                        --prompt="console.history=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[console.history]=$2
                fi
                #Fzf::Fs::U::Spool "FzfFsOptsStr[console.history]='%s'\n" \
                        "${FzfFsOptsStr[console.history]}";
        ;;
        console.history.size)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[console.history.size]=$(
                                command fzf \
                                        --prompt="console.history.size=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[console.history.size]=$2
                fi
                FzfFsOptsStr[console.history.size]=${FzfFsOptsStr[console.history.size:-1000}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[console.history.size]=%d\n" \
                        "${FzfFsOptsStr[console.history.size]}";
        ;;
        console.margin)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[console.margin]=$(
                                command fzf \
                                        --prompt="console.margin=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[console.margin]=$2
                fi
                FzfFsOptsStr[console.margin]=${FzfFsOptsStr[console.margin]:-"0,0,0,0"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[console.margin]='%s'\n" \
                        "${FzfFsOptsStr[console.margin]}";
        ;;
        console.tabstop)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[console.tabstop]=$(
                                command fzf \
                                        --prompt="console.tabstop=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[console.tabstop]=$2
                fi
                FzfFsOptsStr[console.tabstop]=${FzfFsOptsStr[console.tabstop]:-8}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[console.tabstop]=%d\n" \
                        "${FzfFsOptsStr[console.tabstop]}";
        ;;
        consolek.theme)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[consolek.theme]=$(
                                command fzf \
                                        --prompt="consolek.theme=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[consolek.theme]=$2
                fi
                FzfFsOptsStr[consolek.theme]=${FzfFsOptsStr[consolek.theme]:-bw}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[consolek.theme]='%s'\n" \
                        "${FzfFsOptsStr[consolek.theme]}";
        ;;
        consolek.margin)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[consolek.margin]=$(
                                command fzf \
                                        --prompt="consolek.margin=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[consolek.margin]=$2
                fi
                FzfFsOptsStr[consolek.margin]=${FzfFsOptsStr[consolek.margin]:-"0,0,0,0"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[consolek.margin]='%s'\n" \
                        "${FzfFsOptsStr[consolek.margin]}";
        ;;
        consolek.tabstop)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[consolek.tabstop]=$(
                                command fzf \
                                        --prompt="consolek.tabstop=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[consolek.tabstop]=$2
                fi
                FzfFsOptsStr[consolek.tabstop]=${FzfFsOptsStr[consolek.tabstop]:-8}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[consolek.tabstop]=%d\n" \
                        "${FzfFsOptsStr[consolek.tabstop]}";
        ;;
        lc.collate)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        LC_COLLATE=$(
                                command fzf --prompt="LC_COLLATE=" \
                                <<< C$'\n'${LANG};
                        )
                else
                        LC_COLLATE=$2
                fi
                LC_COLLATE=${LC_COLLATE:-C}
                #Fzf::Fs::U::Spool "LC_COLLATE=%s\n" "$LC_COLLATE"
        ;;
        ls.lformat)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[ls.lformat]=$(
                                command fzf \
                                        --prompt="ls.lformat="\
                                        --print-query \
                                        --header='[glno]*' \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[ls.lformat]=$2
                fi
                FzfFsOptsStr[ls.lformat]=${FzfFsOptsStr[ls.lformat]:-l}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[ls.lformat]='%s'\n" :"${FzfFsOptsStr[ls.lformat]}";
        ;;
        ls.time)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[ls.time]=$(
                                command fzf --prompt="ls.time=" \
                                <<< $'atime\nctime\nmtime';
                        )
                else
                        FzfFsOptsStr[ls.time]=$2
                fi
                FzfFsOptsStr[ls.time]=${FzfFsOptsStr[ls.time]:-mtime}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[ls.time]=%s\n" \
                        "${FzfFsOptsStr[ls.time]}";
        ;;
        ls.sort)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[ls.sort]=$(
                                command fzf --prompt="ls.sort=" \
                                <<< $'atime\nbname\nctime\nmtime\nnothing\nsize';
                        )
                else
                        FzfFsOptsStr[ls.sort]=$2
                fi
                FzfFsOptsStr[ls.sort]=${FzfFsOptsStr[ls.sort]:-nothing}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[ls.sort]=%s\n" \"${FzfFsOptsStr[ls.sort]}";
        ;;
        normal.theme)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[normal.theme]=$(
                                command fzf \
                                        --prompt="normal.theme=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[normal.theme]=$2
                fi
                FzfFsOptsStr[normal.theme]=${FzfFsOptsStr[normal.theme]:-bw}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[normal.theme]='%s'\n" "${FzfFsOptsStr[normal.theme]}";
        ;;
        normal.margin)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[normal.margin]=$(
                                command fzf \
                                        --prompt="normal.margin=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[normal.margin]=$2
                fi
                FzfFsOptsStr[normal.margin]=${FzfFsOptsStr[normal.margin]:-"0,0,0,0"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[normal.margin]='%s'\n" \
                        "${FzfFsOptsStr[normal.margin]}";
        ;;
        normal.tabstop)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[normal.tabstop]=$(
                                command fzf \
                                        --prompt="normal.tabstop=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[normal.tabstop]=$2
                fi
                FzfFsOptsStr[normal.tabstop]=${FzfFsOptsStr[normal.tabstop]:-8}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[normal.tabstop]=%d\n" \
                        "${FzfFsOptsStr[normal.tabstop]}";
        ;;
        normalk.theme)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[normalk.theme]=$(
                                command fzf \
                                        --prompt="normalk.theme=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[normalk.theme]=$2
                fi
                FzfFsOptsStr[normalk.theme]=${FzfFsOptsStr[normalk.theme]:-bw}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[normalk.theme]='%s'\n" \
                        "${FzfFsOptsStr[normalk.theme]}";
        ;;
        normalk.margin)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[normalk.margin]=$(
                                command fzf \
                                        --prompt="normalk.margin=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[normalk.margin]=$2
                fi
                FzfFsOptsStr[normalk.margin]=${FzfFsOptsStr[normalk.margin]:-"0,0,0,0"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[normalk.margin]='%s'\n" \
                        "${FzfFsOptsStr[normalk.margin]}";
        ;;
        normalk.tabstop)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[normalk.tabstop]=$(
                                command fzf \
                                        --prompt="normalk.tabstop=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[normalk.tabstop]=$2
                fi
                FzfFsOptsStr[normalk.tabstop]=${FzfFsOptsStr[normalk.tabstop]:-8}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[normalk.tabstop]=%d\n" \
                        "${FzfFsOptsStr[normalk.tabstop]}";
        ;;
        mode)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsVarsStr[mode]=$(
                                command fzf --prompt="mode=" \
                                <<< $'console\nnormal\nsearch';
                        )
                else
                        FzfFsVarsStr[mode]=$2
                fi
                FzfFsVarsStr[mode]=${FzfFsVarsStr[mode]:-normal}
                #Fzf::Fs::U::Spool "FzfFsVarsStr[mode]=%s\n" "${FzfFsVarsStr[mode]}"
        ;;
        os)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[os]=$(
                                command fzf \
                                        --prompt="os=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[os]=$2
                fi
                FzfFsOptsStr[os]=${FzfFsOptsStr[os]:-$( command uname -s )}
        ;;
        search.case)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[search.case]=$(
                                command fzf --prompt="search.case=" \
                                <<< $'insensitive\nsensitive\nsmart';
                        )
                else
                        FzfFsOptsStr[search.case]=$2
                fi
                FzfFsOptsStr[search.case]=${FzfFsOptsStr[search.case]:-smart}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[search.case]='%s'\n" \
                        "${FzfFsOptsStr[search.case]}";
        ;;
        search.theme)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[search.theme]=$(
                                command fzf \
                                        --prompt="search.theme=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[search.theme]=$2
                fi
                FzfFsOptsStr[search.theme]=${FzfFsOptsStr[search.theme]:-bw}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[search.theme]='%s'\n" \
                        "${FzfFsOptsStr[search.theme]}";
        ;;
        search.history)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[search.history]=$(
                                command fzf \
                                        --prompt="search.history=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[search.history]=$2
                fi
                #Fzf::Fs::U::Spool "FzfFsOptsStr[search.history]='%s'\n" \
                        "${FzfFsOptsStr[search.history]}";
        ;;
        search.history.size)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[search.history.size]=$(
                                command fzf \
                                        --prompt="search.history.size=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[search.history.size]=$2
                fi
                FzfFsOptsStr[search.history.size]=${FzfFsOptsStr[search.history.size]:-1000}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[search.history.size]=%d\n" \
                        "${FzfFsOptsStr[search.history.size]}";
        ;;
        search.margin)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[search.margin]=$(
                                command fzf \
                                        --prompt="search.margin=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[search.margin]=$2
                fi
                FzfFsOptsStr[search.margin]=${FzfFsOptsStr[search.margin]:-"0,0,0,0"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[search.margin]='%s'\n" \
                        "${FzfFsOptsStr[search.margin]}";
        ;;
        search.tabstop)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[search.tabstop]=$(
                                command fzf \
                                        --prompt="search.tabstop=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[search.tabstop]=$2
                fi
                FzfFsOptsStr[search.tabstop]=${FzfFsOptsStr[search.tabstop]:-8}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[search.tabstop]=%d\n" \
                        "${FzfFsOptsStr[search.tabstop]}";
        ;;
        search.criteria)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[search.criteria]=$(
                                command fzf \
                                        --prompt="search.criteria=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[search.criteria]=$2
                fi
                FzfFsOptsStr[search.criteria]=${FzfFsOptsStr[search.criteria]:-"length,index"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[search.criteria]='%s'\n" \
                        "${FzfFsOptsStr[search.criteria]}";
        ;;
        searchk.theme)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[searchk.theme]=$(
                                command fzf \
                                        --prompt="searchk.theme=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[searchk.theme]=$2
                fi
                FzfFsOptsStr[searchk.theme]=${FzfFsOptsStr[searchk.theme]:-bw}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[searchk.theme]='%s'\n" \
                        "${FzfFsOptsStr[searchk.theme]}";
        ;;
        searchk.margin)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[searchk.margin]=$(
                                command fzf \
                                        --prompt="searchk.margin=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[searchk.margin]=$2
                fi
                FzfFsOptsStr[searchk.margin]=${FzfFsOptsStr[searchk.margin]:-"0,0,0,0"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[searchk.margin]='%s'\n" \
                        "${FzfFsOptsStr[searchk.margin]}";
        ;;
        searchk.tabstop)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[searchk.tabstop]=$(
                                command fzf \
                                        --prompt="searchk.tabstop=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[searchk.tabstop]=$2
                fi
                FzfFsOptsStr[searchk.tabstop]=${FzfFsOptsStr[searchk.tabstop]:-8}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[searchk.tabstop]=%d\n" \
                        "${FzfFsOptsStr[searchk.tabstop]}";
        ;;
        set.case)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[set.case]=$(
                                command fzf --prompt="set.case=" \
                                        <<< $'insensitive\nsensitive\nsmart';
                        )
                else
                        FzfFsOptsStr[set.case]=$2
                fi
                FzfFsOptsStr[set.case]=${FzfFsOptsStr[set.case]:-smart}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[set.case]='%s'\n" \
                        "${FzfFsOptsStr[set.case]}";
        ;;
        set.theme)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[set.theme]=$(
                                command fzf \
                                        --prompt="set.theme=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[set.theme]=$2
                fi
                FzfFsOptsStr[set.theme]=${FzfFsOptsStr[set.theme]:-bw}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[set.theme]='%s'\n" \
                        "${FzfFsOptsStr[set.theme]}";
        ;;
        set.margin)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[set.margin]=$(
                                command fzf \
                                        --prompt="set.margin=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[set.margin]=$2
                fi
                FzfFsOptsStr[set.margin]=${FzfFsOptsStr[set.margin]:-"0,0,0,0"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[set.margin]='%s'\n" \
                        "${FzfFsOptsStr[set.margin]}";
        ;;
        set.tabstop)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[set.tabstop]=$(
                                command fzf \
                                        --prompt="set.tabstop=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[set.tabstop]=$2
                fi
                FzfFsOptsStr[set.tabstop]=${FzfFsOptsStr[set.tabstop]:-8}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[set.tabstop]=%d\n" \
                        "${FzfFsOptsStr[set.tabstop]}";
        ;;
        set.criteria)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[set.criteria]=$(
                                command fzf \
                                        --prompt="set.criteria=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[set.criteria]=$2
                fi
                FzfFsOptsStr[set.criteria]=${FzfFsOptsStr[set.criteria]:-"length,index"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[set.criteria]='%s'\n" \
                        "${FzfFsOptsStr[set.criteria]}";
        ;;
        tog.case)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[tog.case]=$(
                                command fzf --prompt="tog.case=" \
                                <<< $'insensitive\nsensitive\nsmart';
                        )
                else
                        FzfFsOptsStr[tog.case]=$2
                fi
                FzfFsOptsStr[tog.case]=${FzfFsOptsStr[tog.case]:-smart}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[tog.case]='%s'\n" \
                        "${FzfFsOptsStr[tog.case]}";
        ;;
        tog.theme)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[tog.theme]=$(
                                command fzf \
                                        --prompt="tog.theme=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[tog.theme]=$2
                fi
                FzfFsOptsStr[tog.theme]=${FzfFsOptsStr[tog.theme]:-bw}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[tog.theme]='%s'\n" \
                        "${FzfFsOptsStr[tog.theme]}";
        ;;
        tog.margin)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[tog.margin]=$(
                                command fzf \
                                        --prompt="tog.margin=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[tog.margin]=$2
                fi
                FzfFsOptsStr[tog.margin]=${FzfFsOptsStr[tog.margin]:-"0,0,0,0"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[tog.margin]='%s'\n" \
                        "{$FzfFsOptsStr[tog.margin]}";
        ;;
        tog.tabstop)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[tog.tabstop]=$(
                                command fzf \
                                        --prompt="tog.tabstop=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[tog.tabstop]=$2
                fi
                FzfFsOptsStr[tog.tabstop]=${FzfFsOptsStr[tog.tabstop]:-8}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[tog.tabstop]=%d\n" \
                        "${FzfFsOptsStr[tog.tabstop]}";
        ;;
        tog.criteria)
                if
                        Fzf::Fs::U::Test::Interactive
                then
                        FzfFsOptsStr[tog.criteria]=$(
                                command fzf \
                                        --prompt="tog.criteria=" \
                                        --print-query \
                                0<&-;
                        )
                else
                        FzfFsOptsStr[tog.criteria]=$2
                fi
                FzfFsOptsStr[tog.criteria]=${FzfFsOptsStr[tog.criteria]:-"length,index"}
                #Fzf::Fs::U::Spool "FzfFsOptsStr[tog.criteria]='%s'\n" \
                        "${FzfFsOptsStr[tog.criteria]}";
        esac
}

Fzf::Fs::C::Sh ()
{
        case ${flag_f}${flag_t}${flag_w} in
        111)
                if
                        (( $# ))
                then
                        (
                                exec ${TERMCMD} \
                                        -e "${SHELL:-sh}" \
                                        -c "${*};exec ${SHELL:-sh}" &
                        )
                else
                        ( exec ${TERMCMD} -e "${SHELL:-sh}" & )
                fi
        ;;
        110)
                if
                        (( $# ))
                then
                        ( exec ${TERMCMD} -e "${SHELL:-sh}" -c "${*}" & )
                else
                        ( exec ${TERMCMD} -e "${SHELL:-sh}" & )
                fi
        ;;
        100)
                if
                        (( $# ))
                then
                        ( exec "${SHELL:-sh}" -c "${*}" & )
                else
                        ( exec "${SHELL:-sh}" & )
                fi
        ;;
        011)
                if
                        (( $# ))
                then
                        command ${TERMCMD} \
                                -e "${SHELL:-sh}" \
                                -c "${*};exec ${SHELL:-sh}"
                else
                        command ${TERMCMD} -e "${SHELL:-sh}"
                fi
        ;;
        010)
                if
                        (( $# ))
                then
                        command ${TERMCMD} -e "${SHELL:-sh}" -c "${*}"
                else
                        command ${TERMCMD} -e "${SHELL:-sh}"
                fi
        ;;
        001)
                if
                        (( $# ))
                then
                        "${SHELL:-sh}" \
                                -c "${*};builtin printf '%s\n' 'Press ENTER to continue';builtin read"
                else
                        "${SHELL:-sh}"
                fi
        ;;
        000)
                if
                        (( $# ))
                then
                        "${SHELL-sh}" -c "${*}"
                else
                        "${SHELL:-sh}"
                fi
        esac
} </dev/tty >/dev/tty

Fzf::Fs::C::Shell ()
{
        builtin typeset \
                OPTERR=1 \
                OPTIND=1 \
                a \
                opt \
                prompt=Shell \
                tmp;

        builtin typeset -i \
                flag_f= \
                flag_t= \
                flag_w=;

        builtin typeset -a quoted

        Fzf::Fs::U::Parse::Args "$@"
        builtin set -- ${tmp}

        while
                builtin getopts :ftw opt
        do
                case $opt in
                f)
                        flag_f=1
                ;;
                t)
                        flag_t=1
                ;;
                w)
                        flag_w=1
                ;;
                \?)
                        1>&2 printf "Unknown flag: '-%s'\n" "$OPTARG"
                        builtin exit 1
                esac
        done
        builtin shift $(( OPTIND - 1 ))

        for a
        do
                quoted+=( "${a//\'/\'\\\'\'}" )
        done

        Fzf::Fs::U::Set::Cursor 1
        Fzf::Fs::C::Sh "${quoted[@]}"
        Fzf::Fs::U::Set::Cursor 0
}

Fzf::Fs::C::Toggle ()
{
        [[ $1 == -i ]] && FzfFsVarsInt[interactive]=1 && builtin shift 1

        if
                Fzf::Fs::U::Test::Interactive && [[ -z $1 ]]
        then
                builtin typeset  \
                        bold="$(command tput bold || command tput md)" \
                        green="$(command tput setaf 2 || command tput AF 2)" \
                        i \
                        red="$(command tput setaf 1 || command tput AF 1)" \
                        reset="$(command tput sgr0 || command tput me)" \
                        s;

                while
                        builtin read -r s _
                do
                        Fzf::Fs::C::Toggle "$s"
                done < <(
                        Fzf::Fs::U::Set::Cursor 1
                        Fzf::Fs::O::Toggle
                        {
                                command sed "
                                        /.* 1/ {
                                                s/1$/${bold}${green}1${reset}/;
                                                b return
                                        };
                                        s/0$/${bold}${red}0${reset}/;
                                        : return;
                                " < <(
                                        for i in "${!FzfFsOptsInt[@]}"
                                        do
                                                builtin printf '%s %s\n' "$i" \
                                                        "${FzfFsOptsInt[$i]}";
                                        done
                                )
                        } \
                        | exec column -t \
                        | Fzf::Fs::F::Toggle;
                )
        else
                [[ -n ${FzfFsOptsInt[$1]} ]] && {
                        FzfFsOptsInt[$1]=$((${FzfFsOptsInt[$1]} ? 0 : 1))
                }
                #Fzf::Fs::U::Spool "FzfFsOptsInt[tog.tac]=%d\n" "${FzfFsOptsInt[tog.tac]}"
        fi
}

###############################################################################
# -- FUNCTIONS.
###############################################################################

builtin typeset -a +i FZF_FS_FUNCS="(
        #U::Dump
        #U::Get::Dump
        #U::Get::Spool
        #U::Spool
        Exit
        F::Console
        F::Consolek
        F::Normal
        F::Normalk
        F::Search
        F::Searchk
        F::Set
        F::Toggle
        I::KeyBinds
        I::Ls
        I::Vars
        Main
        Modes::Console
        O::Console
        O::Consolek
        O::Ls
        O::Normal
        O::Normalk
        O::Search
        O::Searchk
        O::Set
        O::Toggle
        Run
        Runk
        U::CopyFunc
        U::Get::FName
        U::Parse::Args
        U::Set::Cursor
        U::Set::Prompt
        U::Set::Pwd
        U::Test::Interactive
)"

Fzf::Fs::Exit ()
{
        Fzf::Fs::U::Set::Cursor 1

        #> "$FZF_FS_SPOOL_FILE"
        #> "$FZF_FS_DUMP_FILE"

        builtin typeset syntax=\#

        builtin unset -f \
                "${FZF_FS_COMMANDS[@]/${syntax}/Fzf::Fs::C::}" \
                "${FZF_FS_COPIES[@]}" \
                "${FZF_FS_FUNCS[@]/${syntax}/Fzf::Fs::}" \
                Spath::Do \
                Spath::GetCols;

        builtin unset -v \
                FZF_FS_COMMANDS \
                FZF_FS_COPIES \
                FZF_FS_FUNCS;

        #exec 6>&-
        #exec 7<&-
        #exec 8>&-
        #exec 9<&-
}

Fzf::Fs::F::Console ()
{
        command fzf \
                +i \
                --ansi \
                --bind="${FzfFsBinds[console.bind]%,}" \
                --exact \
                --expect="${FzfFsBinds[console.expect]%,}" \
                --header="${FzfFsVarsStr[prompt]}" \
                --no-extended \
                --no-sort \
                --print-query \
                --prompt=':' \
                --query="$query" || \
        Fzf::Fs::C::Set normal_mode; # TODO
}

Fzf::Fs::F::Consolek ()
{
        #1>/dev/null
        command fzf \
                +i \
                --ansi \
                --bind="${FzfFsBinds[consolek.${1}.bind]%,}" \
                --exact \
                --expect="${FzfFsBinds[consolek.${1}.expect]%,}" \
                --header-lines=2 \
                --header=$1 \
                --no-extended \
                --no-sort \
                --prompt="  ${FzfFsVarsStr[prompt]} " < <(
                command column -t <<LEG
key command option
--- ------- ------
${FzfFsBinds[consolek.${1}.legend]//\{\}/$2}
LEG
                );
}

Fzf::Fs::F::Normal ()
{
        if
                (( ${FzfFsOptsInt[ls.color]} ))
        then
                #1>/dev/null
                command fzf \
                        +i \
                        --ansi \
                        --bind="${FzfFsBinds[normal.bind]%,}" \
                        --exact \
                        --expect="${FzfFsBinds[normal.expect]%,}" \
                        --no-extended \
                        --nth=.. \
                        --prompt="  ${FzfFsVarsStr[prompt]} " \
                        --with-nth=.. < <(
                        Fzf::Fs::C::LsColor "${FzfFsVarsStr[ls.default.opts]}" "$PWD"
                ) || Fzf::Fs::C::Parent 1; # TODO
        else
                #1>/dev/null
                command fzf \
                        +i \
                        --ansi \
                        --bind="${FzfFsBinds[normal.bind]%,}" \
                        --exact \
                        --expect="${FzfFsBinds[normal.expect]%,}" \
                        --no-extended \
                        --nth=.. \
                        --prompt="  ${FzfFsVarsStr[prompt]} " \
                        --with-nth=2.. < <(
                        Fzf::Fs::C::Ls "${FzfFsVarsStr[ls.default.opts]}" "$PWD"
                ) || Fzf::Fs::C::Parent 1; # TODO
        fi
}

Fzf::Fs::F::Normalk ()
{
        #1>/dev/null
        command fzf \
                +i \
                --ansi \
                --bind="${FzfFsBinds[normalk.${1}.bind]%,}" \
                --exact \
                --expect="${FzfFsBinds[normalk.${1}.expect]%,}" \
                --header-lines=2 \
                --header=$1 \
                --no-extended \
                --no-sort \
                --prompt="  ${FzfFsVarsStr[prompt]} " < <(
                command column -t <<LEG
key command option
--- ------- ------
${FzfFsBinds[normalk.${1}.legend]//\{\}/$2}
LEG
                );
}

Fzf::Fs::F::Search ()
{
        if
                (( ${FzfFsOptsInt[ls.color]} ))
        then
                #1>/dev/null
                command fzf \
                        --ansi \
                        --bind="${FzfFsBinds[search.bind]%,}" \
                        --expect="${FzfFsBinds[search.expect]%,}" \
                        --header="${FzfFsVarsStr[prompt]}" \
                        --nth=.. \
                        --prompt='/' \
                        --with-nth=.. < <(
                        Fzf::Fs::C::LsColor "${FzfFsVarsStr[ls.default.opts]}" "$PWD"
                ) || Fzf::Fs::C::Parent 1; # TODO
        else
                #1>/dev/null
                command fzf \
                        --ansi \
                        --bind="${FzfFsBinds[search.bind]%,}" \
                        --expect="${FzfFsBinds[search.expect]%,}" \
                        --header="${FzfFsVarsStr[prompt]}" \
                        --nth=.. \
                        --prompt='/' \
                        --with-nth=2.. < <(
                        Fzf::Fs::C::Ls "${FzfFsVarsStr[ls.default.opts]}" "$PWD"
                ) || Fzf::Fs::C::Parent 1; # TODO
        fi
}

Fzf::Fs::F::Searchk ()
{
        #1>/dev/null
        command fzf \
                +i \
                --ansi \
                --bind="${FzfFsBinds[searchk.${1}.bind]%,}" \
                --exact \
                --expect="${FzfFsBinds[searchk.${1}.expect]%,}" \
                --header=$1 \
                --header-lines=2 \
                --no-extended \
                --no-sort \
                --prompt="  ${FzfFsVarsStr[prompt]} " < <(
                command column -t <<LEG
key command option
--- ------- ------
${FzfFsBinds[searchk.${1}.legend]//\{\}/$2}
LEG
                );

}

Fzf::Fs::F::Set ()
{
        exec fzf \
                --ansi \
                --bind="${FzfFsBinds[set.bind]%,}" \
                --header=Set \
                --multi \
                --prompt="Set ";
}

Fzf::Fs::F::Toggle ()
{
        exec fzf \
                --ansi \
                --bind="${FzfFsBinds[tog.bind]%,}"\
                --header=Toggle \
                --multi \
                --prompt="Toggle ";
}

Fzf::Fs::I::Vars ()
{
        FzfFsVarsStr+=(
                [cursor.off]="$(command tput civis || command tput vi)"
                [cursor.on]="$(command tput cnorm || command tput ve)"
                [lc.collate.old]="$LC_COLLATE"
                [ls.default.opts]=
                [mode]=
                [prompt]=
        )

        FzfFsVarsInt+=(
                [interactive]=0
        )

        #FZF_FS_DUMP_FILE="${FZF_FS_DUMP_FILE:-/tmp/fzf-fs-${USER}/fzf-fs-dump.$$}"
        #FZF_FS_SPOOL_FILE="${FZF_FS_SPOOL_FILE:-/tmp/fzf-fs-${USER}/fzf-fs-spool.$$}"

        FzfFsOptsStr+=(
                [consolek.margin]="${FzfFsOptsStr[consolek.margin]:-"0,0,0,0"}"
                [consolek.tabstop]="${FzfFsOptsStr[consolek.tabstop]:-8}"
                [consolek.theme]="${FzfFsOptsStr[consolek.theme]:-bw}"
                [console.history]="${FzfFsOptsStr[console.history]}"
                [console.history.size]="${FzfFsOptsStr[console.history.size]:-1000}"
                [console.margin]="${FzfFsOptsStr[console.margin]:-"0,0,0,0"}"
                [console.tabstop]="${FzfFsOptsStr[console.tabstop]:-8}"
                [console.theme]="${FzfFsOptsStr[console.theme]:-bw}"
                [ls.lformat]="${FzfFsOptsStr[ls.lformat]:-l}"
                [ls.sort]="${FzfFsOptsStr[ls.sort]:-nothing}"
                [ls.time]="${FzfFsOptsStr[ls.time]:-mtime}"
                [normalk.margin]="${FzfFsOptsStr[normalk.margin]:-"0,0,0,0"}"
                [normalk.tabstop]="${FzfFsOptsStr[normalk.tabstop]:-8}"
                [normalk.theme]="${FzfFsOptsStr[normalk.theme]:-bw}"
                [normal.margin]="${FzfFsOptsStr[normal.margin]:-"0,0,0,0"}"
                [normal.tabstop]="${FzfFsOptsStr[normal.tabstop]:-8}"
                [normal.theme]="${FzfFsOptsStr[normal.theme]:-bw}"
                [os]="${FzfFsOptsStr[os]}"
                [searchk.margin]="${FzfFsOptsStr[searchk.margin]:-"0,0,0,0"}"
                [searchk.tabstop]="${FzfFsOptsStr[searchk.tabstop]:-8}"
                [searchk.theme]="${FzfFsOptsStr[searchk.theme]:-bw}"
                [search.case]="${FzfFsOptsStr[search.case]:-smart}"
                [search.criteria]="${FzfFsOptsStr[search.criteria]:-"length,index"}"
                [search.history]="${FzfFsOptsStr[search.history]}"
                [search.history.size]="${FzfFsOptsStr[search.history.size]:-1000}"
                [search.margin]="${FzfFsOptsStr[search.margin]:-"0,0,0,0"}"
                [search.tabstop]="${FzfFsOptsStr[search.tabstop]:-8}"
                [search.theme]="${FzfFsOptsStr[search.theme]:-bw}"
                [set.case]="${FzfFsOptsStr[set.case]:-smart}"
                [set.criteria]="${FzfFsOptsStr[set.criteria]:-"length,index"}"
                [set.margin]="${FzfFsOptsStr[set.margin]:-"0,0,0,0"}"
                [set.tabstop]="${FzfFsOptsStr[set.tabstop]:-8}"
                [set.theme]="${FzfFsOptsStr[set.theme]:-bw}"
                [tog.case]="${FzfFsOptsStr[tog.case]:-smart}"
                [tog.criteria]="${FzfFsOptsStr[tog.criteria]:-"length,index"}"
                [tog.margin]="${FzfFsOptsStr[tog.margin]:-"0,0,0,0"}"
                [tog.tabstop]="${FzfFsOptsStr[tog.tabstop]:-8}"
                [tog.theme]="${FzfFsOptsStr[tog.theme]:-bw}"
        )

        FzfFsOptsInt+=(
                [consolek.black]=FzfFsOptsInt[consolek.black]
                [consolek.cycle]=FzfFsOptsInt[consolek.cycle]
                [consolek.hscroll]="${FzfFsOptsInt[consolek.hscroll]:-1}"
                [consolek.inline_info]=FzfFsOptsInt[consolek.inline_info]
                [consolek.mouse]=FzfFsOptsInt[consolek.mouse]
                [consolek.reverse]="${FzfFsOptsInt[consolek.reverse]:-1}"
                [consolek.tac]=FzfFsOptsInt[consolek.tac]
                [console.black]=FzfFsOptsInt[console.black]
                [console.cycle]=FzfFsOptsInt[console.cycle]
                [console.hscroll]="${FzfFsOptsInt[console.hscroll]:-1}"
                [console.inline_info]=FzfFsOptsInt[console.inline_info]
                [console.mouse]=FzfFsOptsInt[console.mouse]
                [console.reverse]=FzfFsOptsInt[console.reverse]
                [console.tac]=FzfFsOptsInt[console.tac]
                [cursor]=FzfFsOptsInt[cursor]
                [ls.F]=FzfFsOptsInt[ls.F]
                [ls.H]=FzfFsOptsInt[ls.H]
                [ls.L]=FzfFsOptsInt[ls.L]
                [ls.color]=FzfFsOptsInt[ls.color]
                [ls.h]=FzfFsOptsInt[ls.h]
                [ls.hidden]=FzfFsOptsInt[ls.hidden]
                [ls.k]=FzfFsOptsInt[ls.k]
                [ls.long]=FzfFsOptsInt[ls.long]
                [ls.p]="${FzfFsOptsInt[ls.p]:-1}"
                [ls.r]=FzfFsOptsInt[ls.r]
                [ls.s]=FzfFsOptsInt[ls.s]
                [normalk.black]=FzfFsOptsInt[normalk.black]
                [normalk.cycle]=FzfFsOptsInt[normalk.cycle]
                [normalk.hscroll]="${FzfFsOptsInt[normalk.hscroll]:-1}"
                [normalk.inline_info]=FzfFsOptsInt[normalk.inline_info]
                [normalk.mouse]=FzfFsOptsInt[normalk.mouse]
                [normalk.reverse]="${FzfFsOptsInt[normalk.reverse]:-1}"
                [normalk.tac]=FzfFsOptsInt[normalk.tac]
                [normal.black]=FzfFsOptsInt[normal.black]
                [normal.cycle]=FzfFsOptsInt[normal.cycle]
                [normal.hscroll]="${FzfFsOptsInt[normal.hscroll]:-1}"
                [normal.inline_info]=FzfFsOptsInt[normal.inline_info]
                [normal.mouse]=FzfFsOptsInt[normal.mouse]
                [normal.reverse]="${FzfFsOptsInt[normal.reverse]:-1}"
                [normal.tac]=FzfFsOptsInt[normal.tac]
                [searchk.black]=FzfFsOptsInt[searchk.black]
                [searchk.cycle]=FzfFsOptsInt[searchk.cycle]
                [searchk.hscroll]="${FzfFsOptsInt[searchk.hscroll]:-1}"
                [searchk.inline_info]=FzfFsOptsInt[searchk.inline_info]
                [searchk.mouse]=FzfFsOptsInt[searchk.mouse]
                [searchk.reverse]="${FzfFsOptsInt[searchk.reverse]:-1}"
                [searchk.tac]=FzfFsOptsInt[searchk.tac]
                [search.black]=FzfFsOptsInt[search.black]
                [search.cycle]=FzfFsOptsInt[search.cycle]
                [search.extended]="${FzfFsOptsInt[search.extended]:-1}"
                [search.fuzzy]=FzfFsOptsInt[search.fuzzy]
                [search.hscroll]="${FzfFsOptsInt[search.hscroll]:-1}"
                [search.inline_info]=FzfFsOptsInt[search.inline_info]
                [search.mouse]=FzfFsOptsInt[search.mouse]
                [search.reverse]=FzfFsOptsInt[search.reverse]
                [search.sort]="${FzfFsOptsInt[search.sort]:-1}"
                [search.tac]=FzfFsOptsInt[search.tac]
                [set.black]=FzfFsOptsInt[set.black]
                [set.cycle]=FzfFsOptsInt[set.cycle]
                [set.extended]="${FzfFsOptsInt[set.extended]:-1}"
                [set.fuzzy]=FzfFsOptsInt[set.fuzzy]
                [set.hscroll]="${FzfFsOptsInt[set.hscroll]:-1}"
                [set.inline_info]=FzfFsOptsInt[set.inline_info]
                [set.mouse]=FzfFsOptsInt[set.mouse]
                [set.reverse]=FzfFsOptsInt[set.reverse]
                [set.sort]="${FzfFsOptsInt[set.sort]:-1}"
                [set.tac]=FzfFsOptsInt[set.tac]
                [tog.black]=FzfFsOptsInt[tog.black]
                [tog.cycle]=FzfFsOptsInt[tog.cycle]
                [tog.extended]="${FzfFsOptsInt[tog.extended]:-1}"
                [tog.fuzzy]=FzfFsOptsInt[tog.fuzzy]
                [tog.hscroll]="${FzfFsOptsInt[tog.hscroll]:-1}"
                [tog.inline_info]=FzfFsOptsInt[tog.inline_info]
                [tog.mouse]=FzfFsOptsInt[tog.mouse]
                [tog.reverse]=FzfFsOptsInt[tog.reverse]
                [tog.sort]="${FzfFsOptsInt[tog.sort]:-1}"
                [tog.tac]=FzfFsOptsInt[tog.tac]
        )

        FzfOptsStr+=(
                #[case]=""
                [black.0]="--no-black "
                [black.1]="--black "
                [criteria]="--tiebreak="
                [cycle.0]="--no-cycle "
                [cycle.1]="--cycle "
                [extended.0]="--no-extended "
                [extended.1]="--extended "
                [fuzzy.0]="--exact "
                [fuzzy.1]="--no-exact "
                [history]="--history="
                [history.size]="--history-size="
                [hscroll.0]="--no-hscroll "
                [hscroll.1]="--hscroll "
                [inline_info.0]="--no-inline-info "
                [inline_info.1]="--inline-info "
                [margin]="--margin="
                [mouse.0]="--no-mouse "
                [mouse.1]="--mouse "
                [reverse.0]="--no-reverse "
                [reverse.1]="--reverse "
                [sort.0]="--no-sort "
                [sort.1]="--sort "
                [tabstop]="--tabstop="
                [tac.0]="--no-tac "
                [tac.1]="--tac "
                [theme]="--color="
        )

        LsOptsStr+=(
                [F.1]=F
                [H.1]=H
                [hidden.1]=a
                [L.1]=L
                [h.1]=h
                [k.1]=k
                [p.1]=p
                [r.1]=r
                [s.1]=s
        )

        FzfFsSettingsStr+=(
                [console.mode]=FzfFsVarsStr[mode]=console
                [console.theme.16]=FzfFsOptsStr[console.theme]=16
                [console.theme.bw]=FzfFsOptsStr[console.theme]=bw
                [console.theme.dark]=FzfFsOptsStr[console.theme]=dark
                [console.theme.light]=FzfFsOptsStr[console.theme]=light
                [consolek.theme.16]=FzfFsOptsStr[consolek.theme]=16
                [consolek.theme.bw]=FzfFsOptsStr[consolek.theme]=bw
                [consolek.theme.dark]=FzfFsOptsStr[consolek.theme]=dark
                [consolek.theme.light]=FzfFsOptsStr[consolek.theme]=light
                [lc.collate.c]=LC_COLLATE=C
                [lc.collate.lang]=LC_COLLATE="$LANG"
                [ls.sort.atime]=FzfFsOptsStr[ls.sort]=atime
                [ls.sort.bname]=FzfFsOptsStr[ls.sort]=bname
                [ls.sort.ctime]=FzfFsOptsStr[ls.sort]=ctime
                [ls.sort.mtime]=FzfFsOptsStr[ls.sort]=mtime
                [ls.sort.nothing]=FzfFsOptsStr[ls.sort]=nothing
                [ls.sort.size]=FzfFsOptsStr[ls.sort]=size
                [ls.time.atime]=FzfFsOptsStr[ls.time]=atime
                [ls.time.ctime]=FzfFsOptsStr[ls.time]=ctime
                [ls.time.mtime]=FzfFsOptsStr[ls.time]=mtime
                [normal.mode]=FzfFsVarsStr[mode]=normal
                [normal.theme.16]=FzfFsOptsStr[normal.theme]=16
                [normal.theme.bw]=FzfFsOptsStr[normal.theme]=bw
                [normal.theme.dark]=FzfFsOptsStr[normal.theme]=dark
                [normal.theme.light]=FzfFsOptsStr[normal.theme]=light
                [normalk.theme.16]=FzfFsOptsStr[normalk.theme]=16
                [normalk.theme.bw]=FzfFsOptsStr[normalk.theme]=bw
                [normalk.theme.dark]=FzfFsOptsStr[normalk.theme]=dark
                [normalk.theme.light]=FzfFsOptsStr[normalk.theme]=light
                [search.mode]=FzfFsVarsStr[mode]=search
                [search.theme.16]=FzfFsOptsStr[search.theme]=16
                [search.theme.bw]=FzfFsOptsStr[search.theme]=bw
                [search.theme.dark]=FzfFsOptsStr[search.theme]=dark
                [search.theme.light]=FzfFsOptsStr[search.theme]=light
                [searchk.theme.16]=FzfFsOptsStr[searchk.theme]=16
                [searchk.theme.bw]=FzfFsOptsStr[searchk.theme]=bw
                [searchk.theme.dark]=FzfFsOptsStr[searchk.theme]=dark
                [searchk.theme.light]=FzfFsOptsStr[searchk.theme]=light
                [set.theme.16]=FzfFsOptsStr[set.theme]=16
                [set.theme.bw]=FzfFsOptsStr[set.theme]=bw
                [set.theme.dark]=FzfFsOptsStr[set.theme]=dark
                [set.theme.light]=FzfFsOptsStr[set.theme]=light
                [tog.theme.16]=FzfFsOptsStr[tog.theme]=16
                [tog.theme.bw]=FzfFsOptsStr[tog.theme]=bw
                [tog.theme.dark]=FzfFsOptsStr[tog.theme]=dark
                [tog.theme.light]=FzfFsOptsStr[tog.theme]=light
        )
}

Fzf::Fs::I::Ls ()
if
        FzfFsOptsStr[os]="${FzfFsOptsStr[os]:-$( command uname -s )}"
        ! builtin typeset -fp Fzf::Fs::C::Ls Fzf::Fs::C::LsColor >/dev/null 2>&1
then
        case ${FzfFsOptsStr[os]} in
        Darwin|DragonFly|FreeBSD)
                function Fzf::Fs::C::Ls () { command ls -G "$@" ; }
                function Fzf::Fs::C::LsColor ()
                {
                        CLICOLOR_FORCE=1 command ls -G "$@"
                }
        ;;
        OpenBSD)
                if
                        >/dev/null builtin command -v colorls
                then
                        function Fzf::Fs::C::Ls () { command colorls -G "$@" ; }
                        function Fzf::Fs::C::LsColor ()
                        {
                                CLICOLOR_FORCE=1 command colorls -G "$@"
                        }
                else
                        if
                                >/dev/null builtin command -v gls
                        then
                                function Fzf::Fs::C::Ls ()
                                {
                                        command gls --color=auto "$@"
                                }
                                function Fzf::Fs::C::LsColor ()
                                {
                                        command gls --color=always "$@"
                                }
                        else
                                function Fzf::Fs::C::Ls () { command ls "$@" ; }
                                function Fzf::Fs::C::LsColor ()
                                {
                                        command ls "$@"
                                }
                        fi
                fi
        ;;
        *)
                function Fzf::Fs::C::Ls () { command ls --color=auto "$@" ; }
                function Fzf::Fs::C::LsColor ()
                {
                        command ls --color=always "$@"
                }
        esac

        #builtin typeset -fx Fzf::Fs::C::Ls Fzf::Fs::C::LsColor;
        FZF_FS_COMMANDS+=( Ls LsColor )
fi

Fzf::Fs::I::KeyBinds ()
{
        FzfFsBinds+=(
                [console.bind]="f4:execute(</dev/tty man fzf >/dev/tty),f3:execute(</dev/tty man fzf >/dev/tty),"
                [console.complete]="ctrl-i"
                [console.ctrl-c]="Fzf::Fs::C::Set normal.mode"
                [console.ctrl-g]="Fzf::Fs::C::Set normal.mode"
                [console.ctrl-q]="Fzf::Fs::C::Quit"
                [console.esc]="Fzf::Fs::C::Set normal.mode"
                [console.expect]='ctrl-c,ctrl-g,ctrl-i,ctrl-q,esc,f1,'
                [console.f1]="Fzf::Fs::C::GetKey f1"
                [consolek.f1.1]="Fzf::Fs::C::Set console.theme.16"
                [consolek.f1.C]="Fzf::Fs::C::Toggle console.cycle"
                [consolek.f1.H]="Fzf::Fs::C::Set -i console.history"
                [consolek.f1.S]="Fzf::Fs::C::Set -i console.history.size"
                [consolek.f1.T]="Fzf::Fs::C::Set console.tac"
                [consolek.f1.b]="Fzf::Fs::C::Toggle console.black"
                [consolek.f1.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [consolek.f1.c]="Fzf::Fs::C::Set -i console.theme"
                [consolek.f1.d]="Fzf::Fs::C::Set console.theme.dark"
                [consolek.f1.expect]="1,C,H,S,T,b,c,d,g,i,l,m,o,r,s,t,w,"
                [consolek.f1.g]="Fzf::Fs::C::Set -i console.margin"
                [consolek.f1.i]="Fzf::Fs::C::Toggle console.inline_info"
                [consolek.f1.l]="Fzf::Fs::C::Set console.theme.light"
                [consolek.f1.legend]=$'1 Set console.theme.16\nC Toggle console.cycle\nH Set console.history\nS Set console.history.size\nT Toggle console.tac\nb Toggle console.black\nc Set console.theme\nd Set console.theme.dark\ng Set console.margin\ni Toggle console.inline_info\nl Set console.theme.light\nm Toggle console.mouse\nr Toggle console.reverse\ns Toggle console.hscroll\nt Set console.tabstop\nw Set console.theme.bw'
                [consolek.f1.m]="Fzf::Fs::C::Toggle console.mouse"
                [consolek.f1.o]="Fzf::Fs::C::Toggle console.sort"
                [consolek.f1.r]="Fzf::Fs::C::Toggle console.reverse"
                [consolek.f1.s]="Fzf::Fs::C::Toggle console.hscroll"
                [consolek.f1.t]="Fzf::Fs::C::Set -i console.tabstop"
                [consolek.f1.w]="Fzf::Fs::C::Set console.theme.bw"
                [normal./]="Fzf::Fs::C::Set search.mode"
                [normal.:]="Fzf::Fs::C::Set console.mode"
                [normal.;]="Fzf::Fs::C::Set console.mode"
                [normal.C]="Fzf::Fs::C::GetKey C"
                [normal.E]="Fzf::Fs::C::Edit {}"
                [normal.N]="Fzf::Fs::C::Set search.mode"
                [normal.S]="Fzf::Fs::C::Shell"
                [normal.T]="Fzf::Fs::C::Shell -ft exec "$SHELL""
                [normal.Z]="Fzf::Fs::C::GetKey Z"
                [normal.bind]="f4:execute(</dev/tty man fzf >/dev/tty),f3:execute(</dev/tty man fzf >/dev/tty),ctrl-b:page-up,ctrl-f:page-down,ctrl-l:clear-screen,down:down,j:down,k:up,pgdn:page-down,pgup:page-up,up:up,alt-b:ignore,alt-bspace:ignore,alt-d:ignore,alt-f:ignore,btab:ignore,ctrl-a:ignore,ctrl-d:ignore,ctrl-e:ignore,ctrl-g:ignore,ctrl-h:ignore,ctrl-i:ignore,ctrl-j:ignore,ctrl-k:ignore,ctrl-n:ignore,ctrl-p:ignore,ctrl-q:ignore,ctrl-u:ignore,ctrl-w:ignore,ctrl-y:ignore,del:ignore,end:ignore,esc:ignore,home:ignore,shift-left:ignore,shift-right:ignore,tab:ignore,"
                [normal.c]="Fzf::Fs::C::GetKey c"
                [normal.ctrl-c]="Fzf::Fs::C::Quit"
                [normal.ctrl-m]="Fzf::Fs::C::Child {}"
                [normal.enter]="Fzf::Fs::C::Child {}"
                [normal.expect]='/,:,;,C,E,N,S,T,Z,c,ctrl-c,ctrl-m,enter,g,h,i,l,left,n,o,q,r,right,z,'
                [normal.g]="Fzf::Fs::C::GetKey g"
                [normal.h]="Fzf::Fs::C::Parent 1"
                [normal.i]="Fzf::Fs::C::Page {}"
                [normal.l]="Fzf::Fs::C::Child {}"
                [normal.left]="Fzf::Fs::C::Parent 1"
                [normal.n]="Fzf::Fs::C::Set search.mode"
                [normal.o]="Fzf::Fs::C::GetKey o"
                [normal.q]="Fzf::Fs::C::Quit"
                [normal.r]="Fzf::Fs::C::GetKey r {}"
                [normal.right]="Fzf::Fs::C::Child {}"
                [normal.z]="Fzf::Fs::C::GetKey z"
                [normalk.C.1]="Fzf::Fs::C::Set normal.theme.16"
                [normalk.C.C]="Fzf::Fs::C::Set -i normal.theme"
                [normalk.C.b]="Fzf::Fs::C::Toggle normal.black"
                [normalk.C.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [normalk.C.c]="Fzf::Fs::C::Toggle ls.color"
                [normalk.C.d]="Fzf::Fs::C::Set normal.theme.dark"
                [normalk.C.expect]="1,C,b,c,d,l,w,"
                [normalk.C.l]="Fzf::Fs::C::Set normal.theme.light"
                [normalk.C.legend]=$'1 Set normal.theme.16\nC Set normal.color\nb Toggle normal.black\nc Toggle ls.color\nd Set normal.theme.dark\nl Set normal.theme.light\nw Set normal.theme.bw'
                [normalk.C.w]="Fzf::Fs::C::Set normal.theme.bw"
                [normalk.Z.F]="Fzf::Fs::C::Toggle ls.F"
                [normalk.Z.H]="Fzf::Fs::C::Toggle ls.H"
                [normalk.Z.L]="Fzf::Fs::C::Toggle ls.L"
                [normalk.Z.M]="Fzf::Fs::C::Set -i ls.lformat"
                [normalk.Z.a]="Fzf::Fs::C::Toggle ls.hidden"
                [normalk.Z.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [normalk.Z.c]="Fzf::Fs::C::Set ls.time.ctime"
                [normalk.Z.expect]="F,H,L,M,a,c,h,k,l,m,p,r,s,u,"
                [normalk.Z.h]="Fzf::Fs::C::Toggle ls.h"
                [normalk.Z.k]="Fzf::Fs::C::Toggle ls.k"
                [normalk.Z.l]="Fzf::Fs::C::Toggle ls.long"
                [normalk.Z.legend]=$'F Toggle ls.F\nH Toggle ls.H\nL Toggle ls.L\nM Set ls.lformat\na Toggle ls.hidden\nc Set ls.time.ctime\nh Toggle ls.h\nk Toggle ls.k\nl Toggle ls.long\nm Set ls.time.mtime\np Toggle ls.p\nr Toggle ls.r\ns Toggle ls.s\nu Set ls.time.atime'
                [normalk.Z.m]="Fzf::Fs::C::Set ls.time.mtime"
                [normalk.Z.p]="Fzf::Fs::C::Toggle ls.p"
                [normalk.Z.r]="Fzf::Fs::C::Toggle ls.r"
                [normalk.Z.s]="Fzf::Fs::C::Toggle ls.s"
                [normalk.Z.u]="Fzf::Fs::C::Set ls.time.atime"
                [normalk.c.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [normalk.c.d]="Fzf::Fs::C::Chdir"
                [normalk.c.expect]="d,p,"
                [normalk.c.legend]=$'d Chdir\np parent'
                [normalk.c.p]="Fzf::Fs::C::Parent"
                [normalk.g.-]='Fzf::Fs::C::Chdir "$OLDPWD"'
                [normalk.g./]="Fzf::Fs::C::Chdir /"
                [normalk.g.1]="Fzf::Fs::C::Parent 1"
                [normalk.g.2]="Fzf::Fs::C::Parent 2"
                [normalk.g.L]="Fzf::Fs::C::Chdir /var/log"
                [normalk.g.M]="Fzf::Fs::C::Chdir /mnt"
                [normalk.g.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [normalk.g.d]="Fzf::Fs::C::Chdir /dev"
                [normalk.g.e]="Fzf::Fs::C::Chdir /etc"
                [normalk.g.expect]="-,/,L,M,d,e,h,l,m,o,r,s,t,u,v,~,1,2,"
                [normalk.g.h]='Fzf::Fs::C::Chdir "$HOME"'
                [normalk.g.l]="Fzf::Fs::C::Cddir /usr/lib"
                [normalk.g.legend]=$'- Chdir $OLDPWD\n/ Chdir /\n1 Parent 1\n2 Parent 2\nL Chdir /var/log\nM Chdir /mnt\nd Chdir /dev\ne Chdir /etc\nh Chdir $HOME\nl Chdir /usr/lib\nm Chdir /media\no Chdir /opt\nr Chdir /\ns Chdir /srv\nt Chdir /tmp\nu Chdir /usr\nv Chdir /var\n~ Chdir $HOME'
                [normalk.g.m]="Fzf::Fs::C::Chdir /media"
                [normalk.g.o]="Fzf::Fs::C::Chdir /opt"
                [normalk.g.r]="Fzf::Fs::C::Chdir /"
                [normalk.g.s]="Fzf::Fs::C::Chdir /srv"
                [normalk.g.t]="Fzf::Fs::C::Chdir /tmp"
                [normalk.g.u]="Fzf::Fs::C::Chdir /usr"
                [normalk.g.v]="Fzf::Fs::C::Chdir /var"
                [normalk.g.~]='Fzf::Fs::C::Chdir "$HOME"'
                [normalk.o.A]="Fzf::Fs::C::Set ls.sort.atime;Fzf::Fs::C::Set ls.r 0"
                [normalk.o.B]="Fzf::Fs::C::Set ls.sort.bname;Fzf::Fs::C::Set ls.r 0"
                [normalk.o.C]="Fzf::Fs::C::Set ls.sort.ctime;Fzf::Fs::C::Set ls.r 0"
                [normalk.o.M]="Fzf::Fs::C::Set ls.sort.mtime;Fzf::Fs::C::Set ls.r 0"
                [normalk.o.S]="Fzf::Fs::C::Set ls.sort.size;Fzf::Fs::C::Set ls.r 0"
                [normalk.o.a]="Fzf::Fs::C::Set ls.sort.atime;Fzf::Fs::C::Set ls.r 1"
                [normalk.o.b]="Fzf::Fs::C::Set ls.sort.bname;Fzf::Fs::C::Set ls.r 1"
                [normalk.o.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [normalk.o.c]="Fzf::Fs::C::Set ls.sort.ctime;Fzf::Fs::C::Set ls.r 1"
                [normalk.o.expect]="A,B,C,M,S,a,b,c,m,n,s,"
                [normalk.o.legend]=$'A Set ls.sort.atime ls.r 0\nB Set ls.sort.bname ls.r 0\nC Set ls.sort.ctime ls.r 0\nM Set ls.sort.mtime ls.r 0\nS Set ls.sort.size ls.r 0\na Set ls.sort.atime ls.r 1\nb Set ls.sort.bname ls.r 1\nc Set ls.sort.ctime ls.r 1\nm Set ls.sort.mtime ls.r 1\nn Set ls.sort.nothing\ns Set ls.sort.size ls.r 1'
                [normalk.o.m]="Fzf::Fs::C::Set ls.sort.mtime;Fzf::Fs::C::Set ls.r 1"
                [normalk.o.n]="Fzf::Fs::C::Set ls.sort.nothing"
                [normalk.o.s]="Fzf::Fs::C::Set ls.sort.size;Fzf::Fs::C::Set ls.r 1"
                [normalk.r.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [normalk.r.e]="Fzf::Fs::C::Edit {}"
                [normalk.r.expect]="e,o,p,"
                [normalk.r.legend]=$'e Edit {}\np Page {}\no Open {}'
                [normalk.r.o]="Fzf::Fs::C::Open {}"
                [normalk.r.p]="Fzf::Fs::C::Page {}"
                [normalk.z.1]="Fzf::Fs::C::Set lc.collate.c"
                [normalk.z.2]="Fzf::Fs::C::Set lc.collate.lang"
                [normalk.z.T]="Fzf::Fs::C::Toggle normal.tac"
                [normalk.z.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [normalk.z.c]="Fzf::Fs::C::Toggle normal.cycle"
                [normalk.z.expect]="1,2,T,c,g,i,m,r,s,t,"
                [normalk.z.g]="Fzf::Fs::C::Set -i normal.margin"
                [normalk.z.i]="Fzf::Fs::C::Toggle normal.inline_info"
                [normalk.z.legend]=$'1 Set lc.collate.c\n2 Set lc.collate.lang\nT Toggle normal.tac\nc Toggle normal.cycle\ng Set normal.margin\ni Toggle normal.inline_info\nm Toggle normal.mouse\nr Toggle normal.reverse\ns Toggle normal.hscroll\nt Set normal.tabstop'
                [normalk.z.m]="Fzf::Fs::C::Toggle normal.mouse"
                [normalk.z.r]="Fzf::Fs::C::Toggle normal.reverse"
                [normalk.z.s]="Fzf::Fs::C::Toggle normal.hscroll"
                [normalk.z.t]="Fzf::Fs::C::Set -i normal.tabstop"
                [search.alt-e]="Fzf::Fs::C::Edit {}"
                [search.alt-h]="Fzf::Fs::C::Parent 1"
                [search.alt-i]="Fzf::Fs::C::Page {}"
                [search.alt-l]="Fzf::Fs::C::Child {}"
                [search.bind]="f4:execute(</dev/tty man fzf >/dev/tty),f3:execute(</dev/tty man fzf >/dev/tty),"
                [search.ctrl-c]="Fzf::Fs::C::Set normal.mode"
                [search.ctrl-g]="Fzf::Fs::C::Set normal.mode"
                [search.ctrl-m]="Fzf::Fs::C::Child {}"
                [search.ctrl-q]="Fzf::Fs::C::Quit"
                [search.enter]="Fzf::Fs::C::Child {}"
                [search.esc]="Fzf::Fs::C::Set normal.mode"
                [search.expect]='alt-e,alt-h,alt-i,alt-l,ctrl-c,ctrl-g,ctrl-m,ctrl-q,enter,esc,f1,'
                [search.f1]="Fzf::Fs::C::GetKey f1"
                [searchk.f1.1]="Fzf::Fs::C::Set search.theme.16"
                [searchk.f1.B]="Fzf::Fs::C::Set -i search.criteria"
                [searchk.f1.C]="Fzf::Fs::C::Toggle search.cycle"
                [searchk.f1.E]="Fzf::Fs::C::Toggle search.extended"
                [searchk.f1.H]="Fzf::Fs::C::Set -i search.history"
                [searchk.f1.S]="Fzf::Fs::C::Set -i search.history.size"
                [searchk.f1.T]="Fzf::Fs::C::Set search.tac"
                [searchk.f1.a]="Fzf::Fs::C::Set -i search.case"
                [searchk.f1.b]="Fzf::Fs::C::Toggle search.black"
                [searchk.f1.bind]="enter:ignore,f3:execute(</dev/tty man fzf >/dev/tty),f4:execute(</dev/tty man ls >/dev/tty),"
                [searchk.f1.c]="Fzf::Fs::C::Set -i search.theme"
                [searchk.f1.d]="Fzf::Fs::C::Set search.theme.dark"
                [searchk.f1.e]="Fzf::Fs::C::Toggle search.fuzzy"
                [searchk.f1.expect]="1,B,C,E,H,S,T,a,b,c,d,e,g,i,l,m,o,r,s,t,w,"
                [searchk.f1.g]="Fzf::Fs::C::Set -i search.margin"
                [searchk.f1.i]="Fzf::Fs::C::Toggle search.inline_info"
                [searchk.f1.l]="Fzf::Fs::C::Set search.theme.light"
                [searchk.f1.legend]=$'1 Set search.theme.16\nB Set search.criteria\nC Toggle search.cycle\nE Toggle search.extended\nH Set search.history\nS Set search.history.size\nT Toggle search.tac\na Set search.case\nb Toggle search.black\nc Set search.theme\nd Set search.theme.dark\ne Toggle search.fuzzy\ng Set search.margin\ni Toggle search.inline_info\nl Set search.theme.light\nm Toggle search.mouse\no Toggle search.sort\nr Toggle search.reverse\ns Toggle search.hscroll\nt Set search.tabstop\nw Set search.theme.bw'
                [searchk.f1.m]="Fzf::Fs::C::Toggle search.mouse"
                [searchk.f1.o]="Fzf::Fs::C::Toggle search.sort"
                [searchk.f1.r]="Fzf::Fs::C::Toggle search.reverse"
                [searchk.f1.s]="Fzf::Fs::C::Toggle search.hscroll"
                [searchk.f1.t]="Fzf::Fs::C::Set -i search.tabstop"
                [searchk.f1.w]="Fzf::Fs::C::Set search.theme.bw"
                [set.bind]="btab:toggle-out,ctrl-i:toggle-in,ctrl-r:toggle-sort,f1:select-all,f2:deselect-all,shift-tab:toggle-out,ctrl-v:toggle,tab:toggle-in,f3:toggle-all,"
                [set.expect]=
                [tog.bind]="btab:toggle-out,ctrl-i:toggle-in,ctrl-r:toggle-sort,f1:select-all,f2:deselect-all,shift-tab:toggle-out,ctrl-v:toggle,tab:toggle-in,f3:toggle-all,"
                [tog.expect]=
        )
}

Fzf::Fs::Main ()
{
        [[
                -d $FZF_FS_CONF_DIR #&&
                #-d ${FZF_FS_DUMP_FILE%/*} #&&
                #-d ${FZF_FS_SPOOL_FILE%/*}
        ]] || {
                command mkdir -p \
                        "$FZF_FS_CONF_DIR" #\
                        #"${FZF_FS_DUMP_FILE%/*}" \
                        #"${FZF_FS_SPOOL_FILE%/*}";
        }

        #[[ -f $FZF_FS_CONF_DIR/spoolrc ]] && {
                #command cp "${FZF_FS_CONF_DIR}/spoolrc" "$FZF_FS_SPOOL_FILE"
        #}

        #exec 7<&-
        #exec 8>&-
        #exec 6>&-
        #exec 9<&-

        #exec 6>> "$FZF_FS_SPOOL_FILE"
        #exec 7< "$FZF_FS_SPOOL_FILE"
        #exec 8> "$FZF_FS_DUMP_FILE"
        #exec 9< "$FZF_FS_DUMP_FILE"

        builtin typeset \
                OPTARG \
                OPTERR=1 \
                OPTIND=1 \
                opt;
        while
                builtin getopts :d:e: opt
        do
                case $opt in
                d)
                        Fzf::Fs::U::Set::Pwd "$OPTARG" || builtin return $?
                ;;
                e)
                                # TODO
                                builtin typeset -fp "${OPTARG%% *}" 1>/dev/null 2>&1 && {
                                        builtin typeset f="${OPTARG%% *}"
                                        builtin typeset a="${OPTARG#${f} }"
                                        if
                                                [[ $a == -i* ]]
                                        then
                                                ${f} -i "${a#-i }"
                                        else
                                                ${f} "${a}"
                                        fi
                                }
                ;;
                \?)
                        1>&2 builtin printf "Unknown flag: '-%s'\n" "$OPTARG"
                        builtin return 79
                esac
        done

        while
                builtin :
        do
                #Fzf::Fs::U::Get::Spool
                #Fzf::Fs::U::Dump
                case ${FzfFsVarsStr[mode]} in
                console)
                        Fzf::Fs::O::Console
                        Fzf::Fs::Modes::Console
                ;;
                search)
                        Fzf::Fs::U::Set::Cursor 1
                        Fzf::Fs::U::Set::Prompt
                        Fzf::Fs::O::Ls
                        Fzf::Fs::O::Search
                        Fzf::Fs::Run Search
                ;;
                *)
                        Fzf::Fs::U::Set::Cursor 0
                        Fzf::Fs::U::Set::Prompt
                        Fzf::Fs::O::Ls
                        Fzf::Fs::O::Normal
                        Fzf::Fs::Run Normal
                esac
        done

        #Fzf::Fs::Exit
}

Fzf::Fs::Modes::Console ()
{
        FzfFsVarsInt[interactive]=1

        builtin typeset \
                command \
                k \
                q \
                query \
                tmp;

        builtin typeset -i count

        builtin typeset -a \
                files \
                chars \
                matches \
                selection \
                strings;

        builtin mapfile -t files < <(
                command sort <(
                                builtin printf '%s\n' "${FZF_FS_COMMANDS[@]}"
                )
        )

        while
                builtin :
        do
                [[ ${FzfFsVarsStr[mode]} != console ]] && builtin break;
                Fzf::Fs::U::Set::Prompt
                Fzf::Fs::U::Set::Cursor 1
                {
                        builtin read -r q
                        builtin read -r k

                } < <(
                         Fzf::Fs::F::Console < <(
                                builtin printf '%s\n' "${files[@]}"
                        )
                )
                if
                        [[ -n ${FzfFsBinds[console.${k}]} ]]
                then
                        # TODO
                        builtin eval "${FzfFsBinds[console.${k}]//\{\}/\"${q}\"}"
                        Fzf::Fs::O::Console
                        #Fzf::Fs::U::Get::Spool && \
                elif
                        [[ -n $q && $k =~ ${FzfFsBinds[console.complete]} ]]
                then
                        builtin mapfile -t matches < <(
                                command grep -e "^${q}" <(
                                        builtin printf '%s\n' "${files[@]}"
                                )
                        )
                        if
                                (( ${#matches[@]} > 1 ))
                        then
                                count=0
                                strings=( ${matches[@]#${q}} )
                                chars=()
                                while
                                        [[ -n ${strings[0]} ]]
                                do
                                        for i in "${!strings[@]}"
                                        do
                                                chars[$i]=${strings[$i]:0:1}
                                        done
                                        if
                                                builtin printf -v tmp '%s' "${chars[@]//${chars[0]}/}"
                                                [[ -z $tmp ]]
                                        then
                                                count+=1
                                                for i in "${!strings[@]}"
                                                do
                                                        strings[$i]=${strings[$i]#${chars[$i]}}
                                                done
                                        else
                                                strings[0]=
                                        fi
                                done
                                if
                                        (( count ))
                                then
                                        query=${matches[0]:0:${#q}+count}
                                else
                                        query=$q
                                fi
                        else
                                if
                                        (( ${#matches[@]} == 1 ))
                                then
                                        query=${matches[0]}
                                else
                                        query=$q
                                fi
                        fi
                        builtin continue
                elif
                        builtin typeset -fp "Fzf::Fs::C::${q}" 1>/dev/null 2>&1
                then
                        query=
                        #"Fzf::Fs::C::${q}" && Fzf::Fs::U::Get::Spool && Fzf::Fs::O::Console;
                        "Fzf::Fs::C::${q}"
                        Fzf::Fs::O::Console
                else
                        query=$q
                        builtin continue
                fi
        done
}

Fzf::Fs::O::Console ()
{
        FZF_DEFAULT_OPTS="${FzfOptsStr[black.${FzfFsOptsInt[console.black]}]}${FzfOptsStr[cycle.${FzfFsOptsInt[console.cycle]}]}${FzfOptsStr[history.size]}${FzfFsOptsStr[console.history.size]} ${FzfOptsStr[hscroll.${FzfFsOptsInt[console.hscroll]}]}${FzfOptsStr[inline_info.${FzfFsOptsInt[console.inline_info]}]}${FzfOptsStr[mouse.${FzfFsOptsInt[console.mouse]}]}${FzfOptsStr[reverse.${FzfFsOptsInt[console.reverse]}]}${FzfOptsStr[tabstop]}${FzfFsOptsStr[console.tabstop]} ${FzfOptsStr[tac.${FzfFsOptsInt[console.tac]}]}${FzfOptsStr[theme]}${FzfFsOptsStr[console.theme]} ${FzfOptsStr[margin]}${FzfFsOptsStr[console.margin]} "

        [[ -e ${FzfFsOptsStr[console.history]} ]] && FZF_DEFAULT_OPTS+="--history='${FzfFsOptsStr[console.history]}' "
}

Fzf::Fs::O::Consolek ()
{
        FZF_DEFAULT_OPTS="${FzfOptsStr[black.${FzfFsOptsInt[consolek.black]}]}${FzfOptsStr[cycle.${FzfFsOptsInt[consolek.cycle]}]}${FzfOptsStr[hscroll.${FzfFsOptsInt[consolek.hscroll]}]}${FzfOptsStr[inline_info.${FzfFsOptsInt[consolek.inline_info]}]}${FzfOptsStr[mouse.${FzfFsOptsInt[consolek.mouse]}]}${FzfOptsStr[reverse.${FzfFsOptsInt[consolek.reverse]}]}${FzfOptsStr[tabstop]}${FzfFsOptsStr[consolek.tabstop]} ${FzfOptsStr[tac.${FzfFsOptsInt[consolek.tac]}]}${FzfOptsStr[theme]}${FzfFsOptsStr[consolek.theme]} ${FzfOptsStr[margin]}${FzfFsOptsStr[consolek.margin]} "
}

Fzf::Fs::O::Ls ()
{
        builtin typeset o=-

        if
                [[ ${FzfFsOptsInt[ls.long]} -ne 0 && -z ${FzfFsOptsStr[ls.lformat]//[glno]/} ]]
        then
                o+=${FzfFsOptsStr[ls.lformat]}
                case ${FzfFsOptsStr[ls.sort]} in
                a*|u|c*|m*|t)
                        o+=t
                ;;
                s*|S)
                        o+=S
                ;;
                n*|f)
                        o+=f
                esac
                case ${FzfFsOptsStr[ls.time]} in
                a*|u)
                        o+=u
                ;;
                c*)
                        o+=c
                esac
        else
                case ${FzfFsOptsStr[ls.sort]} in
                a*|u)
                        o+=tu
                ;;
                c*)
                        o+=tc
                ;;
                m*|t)
                        o+=t
                ;;
                s*|S)
                        o+=S
                ;;
                n*|f)
                        o+=f
                esac
        fi

        o+="${LsOptsStr[F.${FzfFsOptsInt[ls.F]}]}${LsOptsStr[H.${FzfFsOptsInt[ls.H]}]}${LsOptsStr[hidden.${FzfFsOptsInt[ls.hidden]}]}${LsOptsStr[L.${FzfFsOptsInt[ls.L]}]}${LsOptsStr[h.${FzfFsOptsInt[ls.h]}]}${LsOptsStr[k.${FzfFsOptsInt[ls.k]}]}${LsOptsStr[p.${FzfFsOptsInt[ls.p]}]}${LsOptsStr[r.${FzfFsOptsInt[ls.r]}]}${LsOptsStr[s.${FzfFsOptsInt[ls.s]}]}"

        FzfFsVarsStr[ls.default.opts]=${o}1iq
}

Fzf::Fs::O::Normal ()
{
        FZF_DEFAULT_OPTS="${FzfOptsStr[black.${FzfFsOptsInt[normal.black]}]}${FzfOptsStr[cycle.${FzfFsOptsInt[normal.cycle]}]}${FzfOptsStr[hscroll.${FzfFsOptsInt[normal.hscroll]}]}${FzfOptsStr[inline_info.${FzfFsOptsInt[normal.inline_info]}]}${FzfOptsStr[mouse.${FzfFsOptsInt[normal.mouse]}]}${FzfOptsStr[reverse.${FzfFsOptsInt[normal.reverse]}]}${FzfOptsStr[tabstop]}${FzfFsOptsStr[normal.tabstop]} ${FzfOptsStr[tac.${FzfFsOptsInt[normal.tac]}]}${FzfOptsStr[theme]}${FzfFsOptsStr[normal.theme]} ${FzfOptsStr[margin]}${FzfFsOptsStr[normal.margin]} "
}

Fzf::Fs::O::Normalk ()
{
        FZF_DEFAULT_OPTS="${FzfOptsStr[black.${FzfFsOptsInt[normalk.black]}]}${FzfOptsStr[cycle.${FzfFsOptsInt[normalk.cycle]}]}${FzfOptsStr[hscroll.${FzfFsOptsInt[normalk.hscroll]}]}${FzfOptsStr[inline_info.${FzfFsOptsInt[normalk.inline_info]}]}${FzfOptsStr[mouse.${FzfFsOptsInt[normalk.mouse]}]}${FzfOptsStr[reverse.${FzfFsOptsInt[normalk.reverse]}]}${FzfOptsStr[tabstop]}${FzfFsOptsStr[normalk.tabstop]} ${FzfOptsStr[tac.${FzfFsOptsInt[normalk.tac]}]}${FzfOptsStr[theme]}${FzfFsOptsStr[normalk.theme]} ${FzfOptsStr[margin]}${FzfFsOptsStr[normalk.margin]} "
}

Fzf::Fs::O::Search ()
{
        FZF_DEFAULT_OPTS="${FzfOptsStr[black.${FzfFsOptsInt[search.black]}]}${FzfOptsStr[cycle.${FzfFsOptsInt[search.cycle]}]}${FzfOptsStr[hscroll.${FzfFsOptsInt[search.hscroll]}]}${FzfOptsStr[inline_info.${FzfFsOptsInt[search.inline_info]}]}${FzfOptsStr[mouse.${FzfFsOptsInt[search.mouse]}]}${FzfOptsStr[reverse.${FzfFsOptsInt[search.reverse]}]}${FzfOptsStr[tabstop]}${FzfFsOptsStr[search.tabstop]} ${FzfOptsStr[tac.${FzfFsOptsInt[search.tac]}]}${FzfOptsStr[theme]}${FzfFsOptsStr[search.theme]} ${FzfOptsStr[margin]}${FzfFsOptsStr[search.margin]} ${FzfOptsStr[fuzzy.${FzfFsOptsInt[search.fuzzy]}]}${FzfOptsStr[extended.${FzfFsOptsInt[search.extended]}]}${FzfOptsStr[sort.${FzfFsOptsInt[search.sort]}]}${FzfOptsStr[criteria.${FzfFsOptsStr[search.criteria]}]} "

        case ${FzfFsOptsStr[search.case]} in
        insensi*)
                FZF_DEFAULT_OPTS+="-i "
        ;;
        sensi*)
                FZF_DEFAULT_OPTS+="+i "
        esac

        [[ -e ${FzfFsOptsStr[search.history]} ]] && \
                FZF_DEFAULT_OPTS+="--history='${FzfFsOptsStr[search.history]}' "
}

Fzf::Fs::O::Searchk ()
{
        FZF_DEFAULT_OPTS="${FzfOptsStr[black.${FzfFsOptsInt[searchk.black]}]}${FzfOptsStr[cycle.${FzfFsOptsInt[searchk.cycle]}]}${FzfOptsStr[hscroll.${FzfFsOptsInt[searchk.hscroll]}]}${FzfOptsStr[inline_info.${FzfFsOptsInt[searchk.inline_info]}]}${FzfOptsStr[mouse.${FzfFsOptsInt[searchk.mouse]}]}${FzfOptsStr[reverse.${FzfFsOptsInt[searchk.reverse]}]}${FzfOptsStr[tabstop]}${FzfFsOptsStr[searchk.tabstop]} ${FzfOptsStr[tac.${FzfFsOptsInt[searchk.tac]}]}${FzfOptsStr[theme]}${FzfFsOptsStr[searchk.theme]} ${FzfOptsStr[margin]}${FzfFsOptsStr[searchk.margin]} "
}

Fzf::Fs::O::Set ()
{
        FZF_DEFAULT_OPTS="${FzfOptsStr[black.${FzfFsOptsInt[set.black]}]}${FzfOptsStr[cycle.${FzfFsOptsInt[set.cycle]}]}${FzfOptsStr[hscroll.${FzfFsOptsInt[set.hscroll]}]}${FzfOptsStr[inline_info.${FzfFsOptsInt[set.inline_info]}]}${FzfOptsStr[mouse.${FzfFsOptsInt[set.mouse]}]}${FzfOptsStr[reverse.${FzfFsOptsInt[set.reverse]}]}${FzfOptsStr[tabstop]}${FzfFsOptsStr[set.tabstop]} ${FzfOptsStr[tac.${FzfFsOptsInt[set.tac]}]}${FzfOptsStr[theme]}${FzfFsOptsStr[set.theme]} ${FzfOptsStr[margin]}${FzfFsOptsStr[set.margin]} ${FzfOptsStr[fuzzy.${FzfFsOptsInt[set.fuzzy]}]}${FzfOptsStr[extended.${FzfFsOptsInt[set.extended]}]}${FzfOptsStr[sort.${FzfFsOptsInt[set.sort]}]}${FzfOptsStr[criteria.${FzfFsOptsStr[set.criteria]}]} "

        case ${FzfFsOptsStr[set.case]} in
        insensi*)
                FZF_DEFAULT_OPTS+="-i "
        ;;
        sensi*)
                FZF_DEFAULT_OPTS+="+i "
        esac

        [[ -e ${FzfFsOptsStr[set.history]} ]] && \
                FZF_DEFAULT_OPTS+="--history='${FzfFsOptsStr[set.history]}' "
}

Fzf::Fs::O::Toggle ()
{
        FZF_DEFAULT_OPTS="${FzfOptsStr[black.${FzfFsOptsInt[tog.black]}]}${FzfOptsStr[cycle.${FzfFsOptsInt[tog.cycle]}]}${FzfOptsStr[hscroll.${FzfFsOptsInt[tog.hscroll]}]}${FzfOptsStr[inline_info.${FzfFsOptsInt[tog.inline_info]}]}${FzfOptsStr[mouse.${FzfFsOptsInt[tog.mouse]}]}${FzfOptsStr[reverse.${FzfFsOptsInt[tog.reverse]}]}${FzfOptsStr[tabstop]}${FzfFsOptsStr[tog.tabstop]} ${FzfOptsStr[tac.${FzfFsOptsInt[tog.tac]}]}${FzfOptsStr[theme]}${FzfFsOptsStr[tog.theme]} ${FzfOptsStr[margin]}${FzfFsOptsStr[tog.margin]} ${FzfOptsStr[fuzzy.${FzfFsOptsInt[tog.fuzzy]}]}${FzfOptsStr[extended.${FzfFsOptsInt[tog.extended]}]}${FzfOptsStr[sort.${FzfFsOptsInt[tog.sort]}]}${FzfOptsStr[criteria.${FzfFsOptsStr[tog.criteria]}]} "

        case ${FzfFsOptsStr[tog.case]} in
        insensi*)
                FZF_DEFAULT_OPTS+="-i "
        ;;
        sensi*)
                FZF_DEFAULT_OPTS+="+i "
        esac

        [[ -e ${FzfFsOptsStr[tog.history]} ]] && \
                FZF_DEFAULT_OPTS+="--history='${FzfFsOptsStr[tog.history]}' "
}

#Fzf::Fs::U::Dump ()
#{
#        > "$FZF_FS_DUMP_FILE"
#        builtin typeset -p \
#                FzfFsVarsStr \
#                FzfFsOptsStr \
#                FzfFsOptsInt \
#                FzfOptsStr \
#                LsOptsStr \
#                FzfFsBinds \
#        1>&8;
#}

#Fzf::Fs::U::Get::Dump ()
#{
#        builtin . /dev/fd/0
#} 0<9

#Fzf::Fs::U::Get::Spool ()
#{
#        builtin . /dev/fd/0
#} 0<&7

Fzf::Fs::U::Get::FName ()
{
        2>/dev/null \
        command find -H "${1}/." \
                ! -name . \
                -prune \
                -inum "$2" \
                -exec basename '{}' \;
}

Fzf::Fs::U::Test::Interactive () (( ${FzfFsVarsInt[interactive]} ))

Fzf::Fs::U::Parse::Args ()
{
        if
                (( $# ))
        then
                if
                        [[ -e $1 ]]
                then
                        tmp=$1
                else
                        tmp=${1#${1%%[![:space:]]*}}
                        tmp=${tmp%% *}
                        tmp=$( Fzf::Fs::U::Get::FName "$PWD" "$tmp" )
                        if
                                [[ -n $tmp ]]
                        then
                                tmp=$tmp
                        else
                                tmp=$@
                        fi
                fi
        else
                Fzf::Fs::U::Set::Cursor 1
                command tput -S <<CAP
sc
cup $(( ${LINES:-$(command tput lines)} - 2 )) 0
ed
CAP
                builtin read -re -p ":${prompt} " tmp
                command tput -S <<CAP
rc
ed
CAP
        fi
} </dev/tty >/dev/tty

Fzf::Fs::U::Set::Cursor ()
{
        typeset -p FzfFsVarsStr >/tmp/FZF.
        (( ${FzfFsOptsInt[cursor]} )) || {
                case $1 in
                0)
                        builtin printf '%s' ${FzfFsVarsStr[cursor.off]}
                ;;
                1)
                        builtin printf '%s' ${FzfFsVarsStr[cursor.on]}
                esac
        } >/dev/tty
}

Fzf::Fs::U::Set::Prompt ()
{
        builtin typeset -i "cols=${COLUMNS:-$(Spath::GetCols :)}"
        builtin typeset prompt

        COLUMNS=$cols \
        SPATH_MARK=${SPATH_MARK:-" ... "} \
        SPATH_LENGTH=${SPATH_LENGTH:-$(( cols / 3 ))} \
                Spath::Do "prompt" "${PWD//$'\n'/?}";

        prompt=${USER}@${HOSTNAME}:${prompt}
        prompt=${prompt//\/\//\/}
        FzfFsVarsStr[prompt]=${prompt/${HOME}/"~"}
}

Fzf::Fs::U::Set::Pwd ()
{
        builtin typeset \
                pwd="$1" \
                root=/;

        [[ $pwd == .. ]] && {
                pwd=${PWD%/*}
                builtin cd -- "${pwd:-${root}}"
                builtin return 0
        }

        [[ ${pwd:-.} == . ]] && {
                pwd=$PWD
                builtin return 0
        }

        if
                [[ $pwd == - ]]
        then
                pwd=$OLDPWD
        else
                if
                        [[ -d $pwd ]]
                then
                        [[ ${pwd:0:1} == / ]] || pwd=${PWD}/${pwd}
                        if
                                [[ ${pwd:${#pwd}-1} == / ]]
                        then
                                pwd=${pwd%/*}
                        else
                                pwd=$pwd
                        fi
                else
                        1>&2 builtin printf "Arg is not a directory: '%s'\n" "$pwd"
                        builtin return 79
                fi
        fi
        builtin cd -- "${pwd:-$root}"
}

Fzf::Fs::U::CopyFunc ()
{
        case $1 in
        comm*)
                typeset -n tmp=FZF_FS_COMMANDS
        ;;
        cop*)
                typeset -n tmp=FZF_FS_COPIES
        ;;
        f*)
                typeset -n tmp=FZF_FS_FUNCS
        ;;
        *)
                builtin return 1
        esac

        builtin shift 1

        builtin test -n "$(builtin typeset -fp "${1:-1}" 2>/dev/null)" && {
                builtin eval "${_/${1}/${2:-1}}" && tmp+=( $2 )
        }

        builtin unset -n tmp
}

Fzf::Fs::Run ()
{
        builtin typeset \
                key \
                sel;

        {
                read -r key
                read -r sel
        } < <(
                "Fzf::Fs::F::${1}"
        )

        # TODO
        [[ -n ${FzfFsBinds[${1,,}.${key}]} ]] && {
                builtin eval "${FzfFsBinds[${1,,}.${key}]//\{\}/\"${sel}\"}"
        }
}

Fzf::Fs::Runk ()
{
        builtin typeset \
                func="$1" \
                leader="$2" \
                key \
                line="${@:3}" \
                sel;
        {
                read -r key
                read -r sel
        } < <(
                "Fzf::Fs::F::${func}" "$leader" "$line"
        )

        # TODO
        [[ -n ${FzfFsBinds[${func,,}.${leader}.${key}]} ]] && {
                builtin eval "${FzfFsBinds[${func,,}.${leader}.${key}]//\{\}/\"${line:-$sel}\"}"
        }
}

#Fzf::Fs::U::Spool ()
#{
#        builtin printf "$@" 1>&6
#}

###############################################################################
# -- MAIN.
###############################################################################

builtin typeset -a +i FZF_FS_COPIES="()"
builtin typeset -A +i \
        FzfFsBinds="()" \
        FzfFsOptsStr="()" \
        FzfFsSettingsStr="()" \
        FzfFsVarsStr="()" \
        FzfOptsStr="()" \
        LsOptsStr="()";
builtin typeset -Ai \
        FzfFsOptsInt="()" \
        FzfFsVarsInt="()";

Fzf::Fs::I::Vars
Fzf::Fs::I::KeyBinds
builtin . "${FZF_FS_CONF_DIR}/configrc" 2>/dev/null
Fzf::Fs::I::Ls
builtin . "${FZF_FS_CONF_DIR}/keybindsrc" 2>/dev/null

builtin . "spath.sh" || {
        builtin printf '%s: Error: Could not source module: spath.sh\n' "${BASH_SOURCE[0]}" 1>&2
        builtin exit 1 2>/dev/null
}

builtin typeset -x +i \
        FZF_DEFAULT_COMMAND= \
        FZF_DEFAULT_OPTS= \
        LC_COLLATE=C \
        TERMCMD=${TERMCMD:-xterm};

#builtin typeset -fx "${FZF_FS_COMMANDS[@]/#/Fzf::Fs::C::}" "${FZF_FS_COPIES[@]}" "${FZF_FS_FUNCS[@]/#/Fzf::Fs::}";

builtin trap 'Fzf::Fs::Exit' TERM QUIT EXIT

Fzf::Fs::Main "$@"

# vim: set ts=8 sw=8 tw=0 et :
